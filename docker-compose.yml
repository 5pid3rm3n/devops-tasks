version: '3.8'

services:

  zookeeper:
    container_name: zookeeper
    image: 'bitnami/zookeeper:latest'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - '2181:2181'
    networks:
      - app

  kafka:
    container_name: kafka
    image: 'bitnami/kafka:latest'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    networks:
      - app

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    ports:
      - '27017:27017'
    networks:
      - app

  connector:
    hostname: connect
    container_name: connect
    build:
      context: ./api/mongo-connect
      dockerfile: ./mongo-connect.Dockerfile
    depends_on:
      - kafka
      - zookeeper
      - mongo
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-cluster-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
    networks:
      - app

  api:
    container_name: api
    build: 
      context: ./api
      dockerfile: ./api.Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      - kafka
      - mongo
    networks:
      - app

  connect-init:
    container_name: connect-init
    build: 
      context: ./api/shell
      dockerfile: ./shell.Dockerfile
    restart: on-failure
    depends_on:
      - connector
    networks:
      - app


  web:
    container_name: web
    build: 
      context: ./web
      dockerfile: ./web.Dockerfile
    ports:
      - '80:80'
    restart: always
    depends_on:
      - api
      - kafka
      - zookeeper
      - mongo
      - connector
    networks:
      - app

networks:
  app:
    driver: bridge